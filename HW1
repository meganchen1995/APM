{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  <p style=\"text-align: center;\">MIS 382N: ADVANCED PREDICTIVE MODELING - MSBA</p>\n",
    "# <p style=\"text-align: center;\">Assignment 1</p>\n",
    "## <p style=\"text-align: center;\">Total points: 75</p>\n",
    "## <p style=\"text-align: center;\">Due: Tuesday, September 13 submitted via Canvas by 11:59 p</p>\n",
    "\n",
    "Your homework should be written in a **Jupyter notebook**. You may work in groups of two if you wish. Only one student per team needs to submit the assignment on Canvas.  But be sure to include name and UTEID for both students.  Homework groups will be created and managed through Canvas, so please do not arbitrarily change your homework group.  \n",
    "\n",
    "Also, please make sure your code runs and the graphics (and anything else) are displayed in your notebook before submitting. (%matplotlib inline)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 1: Applications of machine learning (10 pts)\n",
    "\n",
    "Read the [article](http://www.datasciencecentral.com/profiles/blogs/20-data-science-systems-used-by-amazon-to-operate-its-business) \"21 data science systems used by Amazon to operate its business\" and pick any two of the data science systems used by Amazon according to this blog.\n",
    "\n",
    "(5 pts each) For each of these two system you have chosen:\n",
    "\n",
    "What kind of machine learning problem is involved (e.g. classification, regression, clustering, outlier detection,...)? Speculate on what kind of data may be needed and how the results can be useful to the company.\n",
    "\n",
    "\n",
    "## Answer\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Fake reviews detection**\n",
    "\n",
    "Machine learning model involved: Binary Classification\n",
    "\n",
    "Data needed: Reviews on products, customer age, gender, location, tenure, type (prime or not), number of reviews given ,etc.\n",
    "\n",
    "Benefits to company: Average reviews (ratings) on products could significantly impact consumer's decision. Removing fake reviews could ensure the credibility of reviews and control the fairness of market competition on platforms like Amazon.\n",
    "\n",
    "**Customer segmentation**\n",
    "\n",
    "Machine learning model involved: Regression, Clustering\n",
    "\n",
    "Data needed: customer age, gender, location, type (prime or not), tenure, product seen, product purchased, purchase date, purchase amount, etc.\n",
    "\n",
    "Benefits to company: By analyzing customer churn using survival analysis, Amazon could cluster customers into different segmentations (e.g. new, active, churn) and increase marketing/adversiting efficiency based on the clustering results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 2: Maximum likelihood estimate (10 pts)\n",
    "\n",
    "Suppose a manager at an internet sales company wants to estimate how fast his salesperson is generating successful leads. Instead of recording the time for each lead, the time taken to generate the next 5 leads are recorded, i.e., there is one recording (denoting the elapsed time) for every 5 consecutive leads. For a specific salesperson, the time intervals recorded are {1,3,1.5,4,2,7,1.2,2,4,3.1} hours. \n",
    "\n",
    "A statistician suggests that if these time intervals are assumed to arise by i.i.d. sampling from the following distribution:\n",
    "$$ p(t) = \\frac{1}{C \\times \\theta^{5}}t^{4}exp^{-\\frac{t}{\\theta}},$$\n",
    "(where C is a normalizing constant). Therefore, if $\\theta$ can be estimated, then he can provide detailed information\n",
    "about the lead generation process, including average rates, variances etc.\n",
    "\n",
    "Find the Maximum Likelihood estimate for $\\theta$ based on the recorded observations.\n",
    "\n",
    "\n",
    "## Answer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{equation*}\n",
    "L(\\theta) = \\prod_{i=1}^{10}p(t_{i}\\mid \\theta) = C^{-10} \\theta^{-50} \\prod_{i=1}^{10}t_{i}^{4} exp(\\frac{-\\sum_{i=1}^{n}t_{i}}{\\theta})\\\\\n",
    "\\ln L(\\theta) = -10\\ln C -50\\ln \\theta + 4\\sum_{i=1}^{10}\\ln t_{i} - \\frac{\\sum_{i=1}^{n}t_{i}}{\\theta}\\\\\n",
    "\\frac{\\partial}{\\partial \\theta} \\ln L(\\theta) = \\frac{-50}{\\theta} + \\frac{\\sum_{i=1}^{n}t_{i}}{\\theta^{2}} = 0\\\\\n",
    "\\hat{\\theta} = \\frac{\\sum_{i=1}^{n}t_{i}}{50} = \\textbf{0.576}\n",
    "\\end{equation*}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 3: Multiple Linear Regression in Python (25 pts)\n",
    "\n",
    "Use the following code to import the boston housing dataset and linear models in python.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2017-10-24T23:28:56.419438Z",
     "start_time": "2017-10-24T23:28:55.430946Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn import datasets, linear_model\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import numpy as np\n",
    "\n",
    "boston = datasets.load_boston()\n",
    "\n",
    "X = boston.data\n",
    "y = boston.target"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset information can be found [here](http://scikit-learn.org/stable/datasets/index.html#boston-house-prices-dataset).\n",
    "\n",
    "a. (3 pts) Print the shape (number of rows and columns) of the feature matrix, and print the first 5 rows.\n",
    "\n",
    "b.  (6 pts) Using ordinary least squares, fit a multiple linear regression (MLR) on all the feature variables using the entire dataset (506 rows). Report the regression coefficient of each input feature and evaluate the model using mean squared error (MSE).  Example of ordinary least squares in Python is shown in Section 1.1.1 of http://scikit-learn.org/stable/modules/linear_model.html.\n",
    "\n",
    "c.  (6 pts) Split the data into a training set and a test set.  Use the first 400 rows for training set and remaining rows for test set.  Fit an MLR using the training set.  Evaluate the trained model using the training set and the test set, respectively.  Compare the two MSE values thus obtained.\n",
    "\n",
    "d.  (6 pts) Do you think your MLR model is reasonable for this problem? You may look at the distribution of residuals to provide an informed answer.\n",
    "\n",
    "e. (5 pts) Use the following code to add new features to the dataset.  You should have 26 variables now.  Note that this code adds one squared term for each variable; in practice one may introduce only a few terms based on domain knowledge or experimentation.  Repeat (c) and report the MSE values of the training set and the test set, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2017-10-24T23:29:00.708382Z",
     "start_time": "2017-10-24T23:29:00.689732Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  6.32000000e-03,   1.80000000e+01,   2.31000000e+00, ...,\n",
       "          1.53000000e+01,   3.96900000e+02,   4.98000000e+00],\n",
       "       [  2.73100000e-02,   0.00000000e+00,   7.07000000e+00, ...,\n",
       "          1.78000000e+01,   3.96900000e+02,   9.14000000e+00],\n",
       "       [  2.72900000e-02,   0.00000000e+00,   7.07000000e+00, ...,\n",
       "          1.78000000e+01,   3.92830000e+02,   4.03000000e+00],\n",
       "       ..., \n",
       "       [  6.07600000e-02,   0.00000000e+00,   1.19300000e+01, ...,\n",
       "          2.10000000e+01,   3.96900000e+02,   5.64000000e+00],\n",
       "       [  1.09590000e-01,   0.00000000e+00,   1.19300000e+01, ...,\n",
       "          2.10000000e+01,   3.93450000e+02,   6.48000000e+00],\n",
       "       [  4.74100000e-02,   0.00000000e+00,   1.19300000e+01, ...,\n",
       "          2.10000000e+01,   3.96900000e+02,   7.88000000e+00]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Answer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(506, 13)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        0     1     2    3      4      5     6       7    8      9     10  \\\n",
      "0  0.00632  18.0  2.31  0.0  0.538  6.575  65.2  4.0900  1.0  296.0  15.3   \n",
      "1  0.02731   0.0  7.07  0.0  0.469  6.421  78.9  4.9671  2.0  242.0  17.8   \n",
      "2  0.02729   0.0  7.07  0.0  0.469  7.185  61.1  4.9671  2.0  242.0  17.8   \n",
      "3  0.03237   0.0  2.18  0.0  0.458  6.998  45.8  6.0622  3.0  222.0  18.7   \n",
      "4  0.06905   0.0  2.18  0.0  0.458  7.147  54.2  6.0622  3.0  222.0  18.7   \n",
      "\n",
      "       11    12  \n",
      "0  396.90  4.98  \n",
      "1  396.90  9.14  \n",
      "2  392.83  4.03  \n",
      "3  394.63  2.94  \n",
      "4  396.90  5.33  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "print pd.DataFrame(X[:5,:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python2.7/site-packages/scipy/linalg/basic.py:1018: RuntimeWarning: internal gelsd driver lwork query error, required iwork dimension not returned. This is likely the result of LAPACK bug 0038, fixed in LAPACK 3.2.2 (released July 21, 2010). Falling back to 'gelss' driver.\n",
      "  warnings.warn(mesg, RuntimeWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = linear_model.LinearRegression()\n",
    "reg.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CRIM       -0.107171\n",
      "ZN          0.046395\n",
      "INDUS       0.020860\n",
      "CHAS        2.688561\n",
      "NOX       -17.795759\n",
      "RM          3.804752\n",
      "AGE         0.000751\n",
      "DIS        -1.475759\n",
      "RAD         0.305655\n",
      "TAX        -0.012329\n",
      "PTRATIO    -0.953464\n",
      "B           0.009393\n",
      "LSTAT      -0.525467\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print pd.Series(reg.coef_, index = boston.feature_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model MSE: 21.8977792177\n"
     ]
    }
   ],
   "source": [
    "y_fit = reg.predict(X)\n",
    "print 'model MSE:', mean_squared_error(y,y_fit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### c."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train, X_test = X[:400],X[400:]\n",
    "y_train, y_test = y[:400],y[400:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "reg2 = linear_model.LinearRegression()\n",
    "reg2.fit(X_train,y_train)\n",
    "y_train_fit = reg2.predict(X_train)\n",
    "y_pred = reg2.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "in-sample MSE: 22.3052255842\n"
     ]
    }
   ],
   "source": [
    "print 'in-sample MSE:', mean_squared_error(y_train,y_train_fit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "out-of-sample MSE: 38.1643386432\n"
     ]
    }
   ],
   "source": [
    "print 'out-of-sample MSE:', mean_squared_error(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Out-of-sample MSE is much higher than in-sample MSE, which could be due to non-random selection of training and test datasets or overfitting."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### d."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x10c8b1650>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\neipBIBkNAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10bfb0b90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib\n",
    "%pylab inline\n",
    "\n",
    "plt.scatter(y_train_fit, y_train - y_train_fit, c = 'b', label = 'training set')\n",
    "plt.scatter(y_pred, y_test - y_pred, c = 'g', label = 'test set')\n",
    "plt.hlines(y=0,xmin=0,xmax=50)\n",
    "\n",
    "plt.xlabel('fitted values')\n",
    "plt.ylabel('residuals')\n",
    "plt.title('Residual vs Fitted Values')\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Residule plot above shows that there are strong patterns in residuals for both training and test sets, indicating non-linearity in the data. Hence we need to consider including higher order terms in the MLR model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### e."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X = np.concatenate((X, np.square(X)), axis=1)\n",
    "X_train, X_test = X[:400],X[400:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg3 = linear_model.LinearRegression()\n",
    "reg3.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_train_fit = reg3.predict(X_train)\n",
    "y_pred = reg3.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "in-sample MSE: 14.4689173781\n"
     ]
    }
   ],
   "source": [
    "print 'in-sample MSE:', mean_squared_error(y_train,y_train_fit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "out-of-sample MSE: 32.9465487204\n"
     ]
    }
   ],
   "source": [
    "print 'out-of-sample MSE:', mean_squared_error(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Both values decrease comparing to part c."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 4: Ridge and Lasso Regression (25 points)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the same boston data from before, in this question you will explore the application of Lasso and Ridge regression using sklearn package in Python. The following code will split the data into training and test set using [train_test_split](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) with **random state 20** and **test_size = 0.33**.  Note: lambda is called alpha in sklearn."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) Use sklearn.linear_model.Lasso and sklearn.linear_model.Ridge classes to do a [5-fold cross validation](http://scikit-learn.org/stable/auto_examples/exercises/plot_cv_diabetes.html#example-exercises-plot-cv-diabetes-py) using sklearn's [KFold](http://scikit-learn.org/stable/modules/generated/sklearn.cross_validation.KFold.html). For the sweep of the regularization parameter, we will look at a grid of values ranging from $\\lambda = 10^{10}$ to $\\lambda = 10^{-2}$. In Python, you can consider this range of values as follows:\n",
    "\n",
    "      import numpy as np\n",
    "\n",
    "      alphas =  10**np.linspace(10,-2,100)*0.5\n",
    "\n",
    "  Report the best chosen $\\lambda$ based on cross validation. The cross validation should happen on your training data using  average MSE as the scoring metric. (8pts)\n",
    "\n",
    "2) Run ridge and lasso for all of the alphas specified above (on training data), and plot the coefficients learned for each of them - there should be one plot each for lasso and ridge, so a total of two plots; the plots for different features for a method should be on the same plot (e.g. Fig 6.6 of JW). What do you qualitatively observe when value of the regularization parameter is changed? (7pts)\n",
    "\n",
    "3) Run least squares regression, ridge, and lasso on the training data. For ridge and lasso, use only the best regularization parameter. Report the prediction error (MSE) on the test data for each. (5pts)\n",
    "\n",
    "4) Run lasso again with cross validation using [sklearn.linear_model.LassoCV](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LassoCV.html). Set the cross validation parameters as follows:\n",
    "\n",
    "    LassoCV(alphas=None, cv=10, max_iter=10000)\n",
    "\n",
    "Report the best $\\lambda$ based on cross validation. Run lasso on the training data using the best $\\lambda$ and report the coefficeints for 26 variables. What do you observe from these coefficients? (5pts)\n",
    "\n",
    "## Answer\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The size of coefficients on independent variables in linear models depends on the scale of the variable. Ridge and lasso regression shrink the coefficients through the tuning parameter $\\lambda$ in order to reduce variance of the model. The effect of regularization would be different when indenpendent variables are on different scales. Hence here we standardize the independent variables before performing ridge and lasso regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.33, random_state=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score, KFold\n",
    "alphas =  10**np.linspace(10,-2,100)*0.5\n",
    "kf = KFold(n_splits = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best lambda for lasso regression: 0.0152692775442\n"
     ]
    }
   ],
   "source": [
    "cv_lasso = []\n",
    "\n",
    "for a in alphas:\n",
    "    lasso = linear_model.Lasso(alpha=a, max_iter=10000)\n",
    "    scores = cross_val_score(lasso, X_train_scaled, y_train, cv=kf,scoring = 'neg_mean_squared_error')\n",
    "    mean_score = -scores.mean()\n",
    "    cv = (a,mean_score)\n",
    "    cv_lasso.append(cv)\n",
    "    \n",
    "best_lasso = sorted(cv_lasso,key=lambda x: x[1])[0][0]\n",
    "print 'best lambda for lasso regression:', best_lasso    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best lambda for ridge regression: 0.328966612329\n"
     ]
    }
   ],
   "source": [
    "cv_ridge= []\n",
    "\n",
    "for a in alphas:\n",
    "    ridge = linear_model.Ridge(alpha=a, max_iter=10000)\n",
    "    scores = cross_val_score(ridge, X_train_scaled, y_train, cv=kf,scoring = 'neg_mean_squared_error')\n",
    "    mean_score = -scores.mean()\n",
    "    cv = (a,mean_score)\n",
    "    cv_ridge.append(cv)\n",
    "    \n",
    "best_ridge = sorted(cv_ridge,key=lambda x: x[1])[0][0]\n",
    "print 'best lambda for ridge regression:', best_ridge"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x10c9c7ad0>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n0NzsHm6fm9xav77BbVjbgcxT7mdUPRbN3FgzuLNuN9YM7qnbLXWK+7jxd9uNNYM763ZjzeCeut1S\nZ72owW1YnwCdjTEdjDEB4FpgpsOZGpobawZ31u3GmsE9dbulTnEfN/5uu7FmcGfdbqwZ3FO3W+qs\nFzW4YWKMeRVYBHQ1xmwzxkyw1pYBPwbeB9YBU621a53MGU5urBncWbcbawb31O2WOsV93Pi77caa\nwZ11u7FmcE/dbqmzIRhbuXS0iIiIiIiISJOmb3BFREREREQkKqjBFRERERERkaigBldERERERESi\nghpcERERERERiQpqcEVERERERCQqqMEVERERERGRqKAGVyTKGGO2GGOS6/szIiIiEh6am0UiRw2u\niIiIiIiIRAU1uCJNmDHmn8aYZcaYtcaYW87Y194Y87kx5u/GmHXGmGnGmNhTfuROY8ynxpjVxphu\nVc8ZaIxZZIxZboxZaIzpGtGCREREmjjNzSLOUoMr0rT90FrbH8gFJhljWp6xvyvwuLW2O3AYuP2U\nffustf2AJ4B7qh77HBhqre0L/Br4XYOmFxERiT6am0UcpAZXpGmbZIxZCSwGMoHOZ+zfaq1dUHV7\nCnDRKfveqPp3GdC+6nYi8A9jzBrg/wE9GiK0iIhIFNPcLOIgNbgiTZQxZjgwErjQWtsbWA6Ezvgx\ne477xVX/lgO+qtsPAB9Za3sCV1UznoiIiJyF5mYR56nBFWm6EoGD1trjVefpXFDNz7Q1xlxYdfs6\nYH4NxtxedfumsKQUERFxD83NIg5TgyvSdL0H+Iwx64DfU3ko1JnygTuqfqYFlef0nMvDwEPGmOX8\n+5NjERERqRnNzSIOM9aeeZSEiEQDY0x74K2qQ5pERETEYZqbRRqevsEVERERERGRqKBvcEVERERE\nRCQq6BtcERERERERiQpqcEVERERERCQqqMEVERERERGRqKAGV0RERERERKKCGlwRERERERGJCmpw\nRUREREREJCr8fxZookCx+eDaAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10c9e3290>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "coefs_lasso = []\n",
    "for a in alphas:\n",
    "    lasso = linear_model.Lasso(alpha=a, max_iter=10000)\n",
    "    lasso.fit(X_train_scaled, y_train)\n",
    "    coefs_lasso.append(lasso.coef_)\n",
    "\n",
    "\n",
    "coefs_ridge = []\n",
    "for a in alphas:\n",
    "    ridge = linear_model.Ridge(alpha=a, max_iter=10000)\n",
    "    ridge.fit(X_train_scaled, y_train)\n",
    "    coefs_ridge.append(ridge.coef_)\n",
    "\n",
    "fig, (ax1, ax2) = subplots(nrows=1,\n",
    "                           ncols=2,\n",
    "                           figsize=(16, 6))   \n",
    "ax1.plot(alphas, coefs_lasso)\n",
    "ax1.set_xscale('log')\n",
    "ax1.set_xlim(ax1.get_xlim()[::-1]) \n",
    "ax1.set_xlabel('alpha')\n",
    "ax1.set_ylabel('standardized coefficients')\n",
    "ax1.set_title('Lasso coefficients as a function of the regularization')\n",
    "  \n",
    "ax2.plot(alphas, coefs_ridge)\n",
    "ax2.set_xscale('log')\n",
    "ax2.set_xlim(ax2.get_xlim()[::-1]) \n",
    "ax2.set_xlabel('alpha')\n",
    "ax2.set_ylabel('standardized coefficients')\n",
    "ax2.set_title('Ridge coefficients as a function of the regularization')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown in above plots, coefficients tend to increase when regularization parameter (alpha) decreases for both models, as a result of minimizing objective functions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "least squares regression prediction error (MSE): 17.2979743299\n",
      "lasso regression prediction error (MSE): 18.6227203068\n",
      "ridge regression prediction error (MSE): 17.6357585532\n"
     ]
    }
   ],
   "source": [
    "lm = linear_model.LinearRegression()\n",
    "lasso = linear_model.Lasso(alpha = best_lasso, max_iter=10000)\n",
    "ridge = linear_model.Ridge(alpha = best_ridge, max_iter=10000)\n",
    "\n",
    "lm.fit(X_train,y_train)\n",
    "lasso.fit(X_train_scaled,y_train)\n",
    "ridge.fit(X_train_scaled,y_train)\n",
    "\n",
    "y_pred_lm = lm.predict(X_test)\n",
    "y_pred_lasso = lasso.predict(X_test_scaled)\n",
    "y_pred_ridge = ridge.predict(X_test_scaled)\n",
    "\n",
    "print 'least squares regression prediction error (MSE):', mean_squared_error(y_test,y_pred_lm)\n",
    "print 'lasso regression prediction error (MSE):', mean_squared_error(y_test,y_pred_lasso)\n",
    "print 'ridge regression prediction error (MSE):', mean_squared_error(y_test,y_pred_ridge)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LassoCV(alphas=None, copy_X=True, cv=10, eps=0.001, fit_intercept=True,\n",
       "    max_iter=10000, n_alphas=100, n_jobs=1, normalize=False,\n",
       "    positive=False, precompute='auto', random_state=None,\n",
       "    selection='cyclic', tol=0.0001, verbose=False)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso = linear_model.LassoCV(alphas=None, cv=10, max_iter=10000)\n",
    "lasso.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best lambda for lasso regression (with lassocv): 0.01610453948\n"
     ]
    }
   ],
   "source": [
    "print 'best lambda for lasso regression (with lassocv):', lasso.alpha_ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CRIM         -1.135432\n",
      "ZN           -0.000000\n",
      "INDUS         0.000000\n",
      "CHAS          0.088149\n",
      "NOX          -0.000000\n",
      "RM          -10.660189\n",
      "AGE           0.000000\n",
      "DIS          -4.111065\n",
      "RAD           1.850287\n",
      "TAX          -1.646562\n",
      "PTRATIO      -1.485745\n",
      "B             0.540134\n",
      "LSTAT        -9.524496\n",
      "CRIM^2        0.000000\n",
      "ZN^2          0.144612\n",
      "INDUS^2       0.338670\n",
      "CHAS^2        0.321665\n",
      "NOX^2        -2.104704\n",
      "RM^2         13.523237\n",
      "AGE^2         0.461298\n",
      "DIS^2         1.986235\n",
      "RAD^2         0.000000\n",
      "TAX^2        -0.000000\n",
      "PTRATIO^2     0.000000\n",
      "B^2          -0.000000\n",
      "LSTAT^2       5.509076\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "feature_names = np.append(boston.feature_names,['{}^2'.format(feature) for feature in boston.feature_names])\n",
    "print pd.Series(lasso.coef_, index = feature_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Out of 26 predictors, only 17 have non-zero coefficients as a result of regularization from Lasso regression. 4 of the first order term and 5 of the Most of the coefficents are shrinked to zero in order to minimize the objective function. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 5  (5 pts)\n",
    "\n",
    "A regression model that includes \"interaction terms\" (i.e. quadratic terms of the form $x_ix_j$) as predictors in addition to the linear terms is clearly more general than a corresponding model that employs the same independent variables but only uses the linear terms. Outline two situations where the simpler (less general) model would be preferred to the more powerful model that includes interactive terms.\n",
    "\n",
    "## Answer\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. When there are only linear relationships between independent variables and dependent variables, interaction terms will not be significant, hence simpler model (with only linear terms) would be preferred.\n",
    "\n",
    "2. When dimension of predictors is large, including interaction terms for all predictors will dramatically increase the dimension, which might lead to over-fitting problem. \n"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
